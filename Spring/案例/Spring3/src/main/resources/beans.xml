<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- spring中的依赖注入
            依赖注入：
                Dependency Injection
            IOC的作用：
                降低程序间的耦合
            依赖关系的管理：
                以后都交给spring来维护
            在当前类需要用到其他类的对象，由spring来提供
            依赖注入：
                能注入的数据有三类：
                    基本类型和String
                    其他bean类型(在配置文件中胡总和注解配置过的bean)
                    复杂类型/集合类型
                注入的方式有三种：
                    使用构造函数提供
                    使用set方法提供
                    使用注解提供
    -->

    <!-- 在构造函数注入
        使用的标签：constructor-arg
        标签的位置：bean标签的内部
        标签的属性：
            type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引位置从0开始
            name:用于指定给构造函数中指定名称的参数赋值
            value:用于提供基本类型和String类型的数据
            ref:用于指定其他的bean类型数据，它指的就是在Spring的Ioc核心容器中出现过的bean对象

            优势：
                在获取bean对象时，注入数据是必须的操作，否则对象无法创建
            弊端：
                改变了bean对象的实例化方式，是我们在创建对象时，如果用不到也必须提供
     -->
    <bean id="accountService" class="com.sw.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <bean id="now" class="java.util.Date"></bean>

    <!-- set方法注入  常用
        使用的标签：property
        出现的位置：bean标签内部
        标签的属性：
            name：用于指定注入时所调用的set方法名称
            value：用于提供解百纳类型和String类型的数据
            ref：用于指定其他的bean类型数据，指的是在spring的Ioc核心容器中出现的bean对象
        优势：
            创建对象没有明确的限制，可以直接使用默认构造函数
        弊端：
            如果某个成员必须有值，则获取对象有可能set方法没有执行到
    -->
    <bean id="accountService2" class="com.sw.service.impl.AccountServiceImpl2">
        <property name="name" value="TEST"></property>
        <property name="age" value="15"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!-- 复杂类型/集合类型的注入
            用于给List结构及和注入的标签：
                list array set
            用于给map结构集合注入的标签：
                map props
            总结：结构相同，标签可以互用
            所以开发中，一般只要两种：list和map
    -->

    <bean id="accountService3" class="com.sw.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>AAAA</value>
                <value>BBBB</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>AAAA</value>
                <value>BBBB</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>AAAA</value>
                <value>BBBB</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>bbb</value>
                </entry>
            </map>
        </property>
        <property name="myProps">
            <props>
                <prop key="testP"></prop>
            </props>
        </property>
    </bean>
</beans>