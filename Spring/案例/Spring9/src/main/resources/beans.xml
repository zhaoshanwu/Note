<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置springdeIoc，把service对象配置进来 -->
    <bean id="accountService" class="com.sw.service.impl.AccountServiceImpl"></bean>

    <!-- spring中基于xml的AOP配置步骤
            1、把通知Bean交给spring来管理
            2、使用aop：config标签表明开始AOP的配置
            3、使用aop：aspect标签表明配置切面
                id：给切面提供一个唯一标识
                ref：指定通知类bean的id
            4、在aop：aspect标签的内部使用对应的标签来配置通知的类型
                该案例是让pringLog方法在切入点方法执行前执行，所以是前置通知
                aop：before：表示配置前置通知
                     method:指定Logger类中哪个方法是前置通知
                     pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层的哪些方法增强
                切入点表达式的写法：
                    关键字：execution(表达式)
                    表达式：
                        访问修饰符    返回值    包名.包名...类名.方法名(参数列表)
                    写法：public    void     com.sw.service.impl.AccountServiceImpl.saveAccount()
                    上面这种写法只能对一个方法进行切入，而且写起来较为繁琐，可以再加强
                    （1）访问修饰符可以省略
                        void com.sw.service.impl.AccountServiceImpl.saveAccount()
                    （2）返回值可以使用通配符，表示任意返回值
                        * com.sw.service.impl.AccountServiceImpl.saveAccount()
                    （3）包名可以使用通配符表示任意包，但是有几级包就需要写几个*
                        * *.*.*.*.AccountServiceImpl.saveAccount()
                    （4）包名可以使用..表示当前包及其子包
                        * *..AccountServiceImpl.saveAccount()  这就表示该包下所有AccountServiceImpl类的saveAccount方法都被增强
                    （5）类名和方法名都可以使用*实现通配
                        * *..*.*()   但要注意的是（）里没有参数，所以只包含所有的无参方法
                    （6）参数列表：
                        可以直接写数据类型：
                            基本类型直接写名称  int
                            引用类型写包名.类名   java.lang.String
                            可以使用通配符表示任意类型，但必须有这个参数
                            也可以使用..表示有无参数均可，有参数可以是任意类型   但要慎用
                        * *..*.*(int)   但还是要注意（）里有int只是表示包含所有的带int参数的方法
                    全通配写法：
                        * *..*.*(..)
                    实际开发中切入点表达式的通常写法：
                        切到业务层实现类下的所有方法：
                            * com.sw.service.impl.*.*(..)

     -->

    <!-- 配置Logger类 -->
    <bean id="logger" class="com.sw.utils.Logger"></bean>

    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知的类型，并且建立通知方法和切入点方法的关联-->
            <aop:before method="printLog" pointcut="execution(public void com.sw.service.impl.AccountServiceImpl.saveAccount())"></aop:before>
        </aop:aspect>
    </aop:config>
</beans>